class ColorWheel
!!!167685.cpp!!!	ColorWheel(inout parent : QWidget = 0)

    resize(initSize);
    //    setSizeIncrement(10,10);
    setMinimumSize(200,200);
    //    setMaximumSize(400,400);
    setCursor(Qt::CrossCursor);
!!!167813.cpp!!!	sizeHint() : QSize

    return QSize(height(),height());
!!!167941.cpp!!!	minimumSizeHint() : QSize

    return QSize(30,30);
!!!168069.cpp!!!	color() : QColor

    return current;
!!!168197.cpp!!!	setColor(in color : QColor) : void

    if(color.hue() != current.hue()){
        hueChanged(color.hue());
    }

    if( color.saturation() != current.saturation()
            || color.value() != current.value() ){
        svChanged(color);
    }
!!!168453.cpp!!!	hueChanged(in hue : int) : void

    if( hue<0 )return;
    int s = current.saturation();
    int v = current.value();
    current.setHsv(hue, s, v);
    drawWheel(size());
    drawSquare(hue);
    drawIndicator(hue);
    drawPicker(current);
    repaint();
    emit colorChange(current);
!!!168581.cpp!!!	svChanged(in newcolor : QColor) : void

    int hue = current.hue();
    current.setHsv(hue, newcolor.saturation(), newcolor.value());
    drawWheel(size());
    drawSquare(hue);
    drawIndicator(hue);
    drawPicker(newcolor);
    repaint();
    emit colorChange(current);
!!!168709.cpp!!!	mousePressEvent(inout event : QMouseEvent) : void

    lastPos = event->pos();
    if(wheelRegion.contains(lastPos)){
        inWheel = true;
        inSquare = false;
        QColor color = posColor(lastPos);
        hueChanged(color.hue());
    }else if(squareRegion.contains(lastPos)){
        inWheel = false;
        inSquare = true;
        QColor color = posColor(lastPos);
        svChanged(color);
    }
    mouseDown = true;
!!!168837.cpp!!!	mouseMoveEvent(inout event : QMouseEvent) : void

    lastPos = event->pos();
    if( !mouseDown ) return;
    if(wheelRegion.contains(lastPos) && inWheel){
        QColor color = posColor(lastPos);
        hueChanged(color.hue());
    }else if(squareRegion.contains(lastPos) && inSquare){
        QColor color = posColor(lastPos);
        svChanged(color);
    }
!!!168965.cpp!!!	mouseReleaseEvent(inout event : QMouseEvent) : void

    mouseDown = false;
    inWheel = false;
    inSquare = false;
!!!169093.cpp!!!	resizeEvent(inout event : QResizeEvent) : void

    wheel = QImage(event->size(), QImage::Format_ARGB32_Premultiplied);
    //wheel.fill(palette().background().color());
    //    source = wheel;
    //    source.fill(Qt::transparent);

    drawWheel(event->size());
    drawSquare(current.hue());
    drawIndicator(current.hue());
    drawPicker(current);
    update();
!!!169221.cpp!!!	paintEvent(inout event : QPaintEvent) : void

    QPainter painter(this);
    QStyleOption opt;
    opt.init(this);
    painter.drawImage(0,0,wheel);
    style()->drawPrimitive(QStyle::PE_Widget, &opt, &painter, this);
!!!169349.cpp!!!	posColor(in point : QPoint) : QColor

    if( ! wheel.valid(point) ) return QColor();
    if(inWheel){
        qreal hue = 0;
        int r = qMin(width(), height()) / 2;
        if( point.x() > r ){
            if(point.y() < r ){
                //1
                hue = 90 - (qAtan2( (point.x() - r) , (r - point.y()) )  / 3.14 / 2 * 360);
            }else{
                //4
                hue = 270 + (qAtan2( (point.x() - r) , (point.y() - r ) )  / 3.14 / 2 * 360);
            }
        }else{
            if(point.y() < r ){
                //2
                hue =  90 + (qAtan2( (r - point.x()) , (r - point.y()) )  / 3.14 / 2 * 360);
            }else{
                //3
                hue =  270 - (qAtan2( (r - point.x()) , (point.y() - r ))  / 3.14 / 2 * 360);
            }
        }
        return QColor::fromHsv(hue, current.saturation(), current.value() );
    }
    if(inSquare){
        // region of the widget
        int w = qMin(width(), height());
        // radius of outer circle
        qreal r = w/2-margin;
        // radius of inner circle
        qreal ir = r-wheelWidth;
        // left corner of square
        qreal m = w/2.0-ir/qSqrt(2);
        QPoint p = point - QPoint(m, m);
        qreal SquareWidth = 2*ir/qSqrt(2);
        return QColor::fromHsvF( current.hueF(), p.x()/SquareWidth, p.y()/SquareWidth );
    }
    return QColor();
!!!169477.cpp!!!	drawWheel(in newSize : QSize) : void


    int r = qMin(newSize.width(), newSize.height());

    QPainter painter(&wheel);
    painter.setRenderHint(QPainter::Antialiasing);
    wheel.fill(Qt::white);

    QConicalGradient conicalGradient(0, 0, 0);
    conicalGradient.setColorAt(0.0, Qt::red);
    conicalGradient.setColorAt(60.0/360.0, Qt::yellow);
    conicalGradient.setColorAt(120.0/360.0, Qt::green);
    conicalGradient.setColorAt(180.0/360.0, Qt::cyan);
    conicalGradient.setColorAt(240.0/360.0, Qt::blue);
    conicalGradient.setColorAt(300.0/360.0, Qt::magenta);
    conicalGradient.setColorAt(1.0, Qt::red);

    /* outer circle */
    painter.translate(r / 2, r / 2);

    QBrush brush(conicalGradient);
    painter.setPen(Qt::NoPen);
    painter.setBrush(brush);
    painter.drawEllipse(QPoint(0,0),r/2-margin,r/2-margin);
    /* inner circle */
    painter.setBrush(Qt::white);
    painter.drawEllipse(QPoint(0,0),r/2-margin-wheelWidth,r/2-margin-wheelWidth);

    //    QPainter painter2(&wheel);
    //    painter2.drawImage(0,0,source);

    //caculate wheel region
    wheelRegion = QRegion(r/2, r/2, r-2*margin, r-2*margin, QRegion::Ellipse);
    wheelRegion.translate(-(r-2*margin)/2, -(r-2*margin)/2);

    int tmp = 2*(margin+wheelWidth);
    QRegion subRe( r/2, r/2, r-tmp, r-tmp, QRegion::Ellipse );
    subRe.translate(-(r-tmp)/2, -(r-tmp)/2);
    wheelRegion -= subRe;
!!!169605.cpp!!!	drawIndicator(in hue : int) : void

    QPainter painter(&wheel);
    painter.setRenderHint(QPainter::Antialiasing);
    if(hue > 20 && hue < 200){
        painter.setPen(Qt::black);
    }else{
        painter.setPen(Qt::white);
    }
    painter.setBrush(Qt::NoBrush);

    QPen pen = painter.pen();
    pen.setWidth(3);
    painter.setPen(pen);
    qreal r = qMin(height(), width()) / 2.0;
    painter.translate(r, r);
    painter.rotate( -hue );
    r = qMin(height(), width()) / 2.0 - margin - wheelWidth/2;
    painter.drawEllipse(QPointF(r,0.0),5,5);
!!!169733.cpp!!!	drawPicker(in color : QColor) : void

    QPainter painter(&wheel);
    painter.setRenderHint(QPainter::Antialiasing);
    QPen pen;

    // region of the widget
    int w = qMin(width(), height());
    // radius of outer circle
    qreal r = w/2-margin;
    // radius of inner circle
    qreal ir = r-wheelWidth;
    // left corner of square
    qreal m = w/2.0-ir/qSqrt(2);
    painter.translate(m-5, m-5);
    qreal SquareWidth = 2*ir/qSqrt(2);
    qreal S = color.saturationF()*SquareWidth;
    qreal V = color.valueF()*SquareWidth;

    if(color.saturation() > 30 ||color.value() < 50){
        pen.setColor(Qt::white);
    }
    pen.setWidth(3);
    painter.setPen(pen);
    painter.drawEllipse(S,V,10,10);
!!!169861.cpp!!!	drawSquare(in hue : int) : void

    QPainter painter(&wheel);
    painter.setRenderHint(QPainter::Antialiasing);

    // region of the widget
    int w = qMin(width(), height());
    // radius of outer circle
    qreal r = w/2-margin;
    // radius of inner circle
    qreal ir = r-wheelWidth;
    // left corner of square
    qreal m = w/2.0-ir/qSqrt(2);
    painter.translate(m, m);
    painter.setPen(Qt::NoPen);
    QImage square(255,255,QImage::Format_ARGB32_Premultiplied);
    QColor color;
    QRgb vv;
    for(int i=0;i<255;++i){
        for(int j=0;j<255;++j){
            color = QColor::fromHsv(hue,i,j);
            vv = qRgb(color.red(),color.green(),color.blue());
            square.setPixel(i,j,vv);
        }
    }
    qreal SquareWidth = 2*ir/qSqrt(2);
    square = square.scaled(SquareWidth,SquareWidth);
    painter.drawImage(0,0,square);

    //    QPainter painter2(&wheel);
    //    painter2.drawImage(0,0,source);

    squareRegion = QRegion(m, m, SquareWidth, SquareWidth);
